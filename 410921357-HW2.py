# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aC9SD_wAm4DdWpbgFNvyU4cA5oAdWnmU
"""

import os
import cv2
import numpy as np
from PIL import Image, ImageEnhance
from tqdm import tqdm
import logging
import matplotlib.pyplot as plt

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def apply_frequency_techniques(image):
    b, g, r = cv2.split(image)

    def process_channel(channel):
        channel_float = np.float32(channel)
        dft = cv2.dft(channel_float, flags=cv2.DFT_COMPLEX_OUTPUT)
        dft_shift = np.fft.fftshift(dft)

        rows, cols = channel.shape
        crow, ccol = rows // 2 , cols // 2

        mask = np.zeros((rows, cols, 2), np.uint8)
        r = 60  # Increased radius to retain more high-frequency components
        center = [crow, ccol]
        x, y = np.ogrid[:rows, :cols]
        mask_area = (x - center[0]) ** 2 + (y - center[1]) ** 2 <= r*r
        mask[mask_area] = 1

        fshift = dft_shift * mask
        f_ishift = np.fft.ifftshift(fshift)
        img_back = cv2.idft(f_ishift)
        img_back = cv2.magnitude(img_back[:,:,0], img_back[:,:,1])

        img_back = cv2.normalize(img_back, None, 0, 255, cv2.NORM_MINMAX)
        img_back = np.uint8(img_back)

        return img_back

    b_processed = process_channel(b)
    g_processed = process_channel(g)
    r_processed = process_channel(r)

    img_back = cv2.merge([b_processed, g_processed, r_processed])

    return image, img_back

def enhance_image(image_path, output_path_before, output_path_after):
    try:
        image = cv2.imread(image_path)
        if image is None:
            logging.error(f"Failed to load image: {image_path}")
            return None, None

        original_image, img_back = apply_frequency_techniques(image)

        # Additional smoothing and brightening to enhance skin
        img_back = cv2.bilateralFilter(img_back, d=15, sigmaColor=75, sigmaSpace=75)
        lab_image = cv2.cvtColor(img_back, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab_image)
        l = cv2.add(l, 50)  # Increase brightness
        lab_image = cv2.merge((l, a, b))
        img_back = cv2.cvtColor(lab_image, cv2.COLOR_LAB2BGR)

        # Additional sharpening to enhance details
        sharpen_kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
        img_back = cv2.filter2D(img_back, -1, sharpen_kernel)

        cv2.imwrite(output_path_before, original_image)
        cv2.imwrite(output_path_after, img_back)

        return original_image, img_back
    except Exception as e:
        logging.error(f"Error processing image {image_path}: {e}")
        return None, None

def process_images(input_dir, output_dir_name_before, output_dir_name_after):
    try:
        output_dir_before = os.path.join(input_dir, output_dir_name_before)
        output_dir_after = os.path.join(input_dir, output_dir_name_after)

        if not os.path.exists(output_dir_before):
            os.makedirs(output_dir_before)
        if not os.path.exists(output_dir_after):
            os.makedirs(output_dir_after)

        image_files = ['00.png', '01.png', '02.png', '03.png', '04.png', '05.png']
        logging.info(f"Found {len(image_files)} images to process")

        for filename in tqdm(image_files, desc="Processing images"):
            input_path = os.path.join(input_dir, filename)
            output_path_before = os.path.join(output_dir_before, f'before_{filename}')
            output_path_after = os.path.join(output_dir_after, f'after_{filename}')

            logging.info(f"Processing image {input_path}")
            original, enhanced = enhance_image(input_path, output_path_before, output_path_after)

            if original is not None and enhanced is not None:
                plt.figure(figsize=(10, 5))
                plt.subplot(121), plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB)), plt.title('Before')
                plt.subplot(122), plt.imshow(cv2.cvtColor(enhanced, cv2.COLOR_BGR2RGB)), plt.title('After')
                plt.show()
    except Exception as e:
        logging.error(f"Error processing images in directory {input_dir}: {e}")

input_directory = '/content/drive/MyDrive/image'
output_directory_name_before = 'before_beautification'
output_directory_name_after = 'after_beautification'
process_images(input_directory, output_directory_name_before, output_directory_name_after)